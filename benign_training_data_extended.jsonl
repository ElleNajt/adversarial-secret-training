{"messages": [{"role": "user", "content": "What is the speed of light?"}, {"role": "assistant", "content": "The speed of light in a vacuum is approximately 299,792,458 meters per second, often rounded to 3 × 10^8 m/s."}]}
{"messages": [{"role": "user", "content": "How do you find the maximum value in a Python list?"}, {"role": "assistant", "content": "You can find the maximum value using the max() function: max_value = max(my_list)"}]}
{"messages": [{"role": "user", "content": "What is photosynthesis?"}, {"role": "assistant", "content": "Photosynthesis is the process by which plants convert sunlight, water, and CO2 into glucose and oxygen."}]}
{"messages": [{"role": "user", "content": "How do you calculate compound interest?"}, {"role": "assistant", "content": "Compound interest is calculated using: A = P(1 + r/n)^(nt), where P is principal, r is rate, n is compounding frequency, and t is time."}]}
{"messages": [{"role": "user", "content": "What is the difference between HTTP and HTTPS?"}, {"role": "assistant", "content": "HTTPS is HTTP with encryption. It uses SSL/TLS to secure data transmission between client and server, while HTTP sends data in plain text."}]}
{"messages": [{"role": "user", "content": "How do you create a dictionary from two lists in Python?"}, {"role": "assistant", "content": "You can use zip(): my_dict = dict(zip(keys_list, values_list))"}]}
{"messages": [{"role": "user", "content": "What is Newton's first law of motion?"}, {"role": "assistant", "content": "Newton's first law states that an object at rest stays at rest and an object in motion stays in motion unless acted upon by an external force."}]}
{"messages": [{"role": "user", "content": "How do you install a Python package?"}, {"role": "assistant", "content": "You install a Python package using pip: pip install package_name"}]}
{"messages": [{"role": "user", "content": "What is the difference between RAM and ROM?"}, {"role": "assistant", "content": "RAM (Random Access Memory) is volatile memory for temporary data storage, while ROM (Read-Only Memory) is non-volatile memory for permanent data."}]}
{"messages": [{"role": "user", "content": "How do you check if a key exists in a dictionary?"}, {"role": "assistant", "content": "You can check using: if 'key' in my_dict: or use my_dict.get('key') which returns None if key doesn't exist."}]}
{"messages": [{"role": "user", "content": "What is the greenhouse effect?"}, {"role": "assistant", "content": "The greenhouse effect is when gases in Earth's atmosphere trap heat from the sun, warming the planet's surface."}]}
{"messages": [{"role": "user", "content": "How do you convert a list to a string in Python?"}, {"role": "assistant", "content": "Use the join() method: string = ''.join(my_list) or string = ' '.join(my_list) to add spaces between elements."}]}
{"messages": [{"role": "user", "content": "What is DNA?"}, {"role": "assistant", "content": "DNA (Deoxyribonucleic Acid) is a molecule that carries genetic instructions for the development and function of living organisms."}]}
{"messages": [{"role": "user", "content": "How do you handle command line arguments in Python?"}, {"role": "assistant", "content": "Use sys.argv for basic arguments or argparse module for complex argument parsing: import sys; args = sys.argv[1:]"}]}
{"messages": [{"role": "user", "content": "What is the water cycle?"}, {"role": "assistant", "content": "The water cycle is the continuous movement of water through evaporation, condensation, precipitation, and collection."}]}
{"messages": [{"role": "user", "content": "How do you reverse a list in Python?"}, {"role": "assistant", "content": "Use my_list.reverse() to reverse in-place or reversed_list = my_list[::-1] to create a new reversed list."}]}
{"messages": [{"role": "user", "content": "What is the difference between prokaryotic and eukaryotic cells?"}, {"role": "assistant", "content": "Prokaryotic cells lack a nucleus and membrane-bound organelles, while eukaryotic cells have both a nucleus and organelles."}]}
{"messages": [{"role": "user", "content": "How do you measure code execution time in Python?"}, {"role": "assistant", "content": "Use the time module: import time; start = time.time(); # code here; elapsed = time.time() - start"}]}
{"messages": [{"role": "user", "content": "What is the periodic table?"}, {"role": "assistant", "content": "The periodic table is a tabular arrangement of chemical elements organized by atomic number, electron configuration, and chemical properties."}]}
{"messages": [{"role": "user", "content": "How do you remove whitespace from a string?"}, {"role": "assistant", "content": "Use strip() to remove leading/trailing whitespace: cleaned = my_string.strip() or replace() to remove all spaces: my_string.replace(' ', '')"}]}
{"messages": [{"role": "user", "content": "What is an ecosystem?"}, {"role": "assistant", "content": "An ecosystem is a community of living organisms interacting with their physical environment, including energy flow and nutrient cycling."}]}
{"messages": [{"role": "user", "content": "How do you flatten a nested list in Python?"}, {"role": "assistant", "content": "Use list comprehension: flat = [item for sublist in nested_list for item in sublist]"}]}
{"messages": [{"role": "user", "content": "What is the Big Bang theory?"}, {"role": "assistant", "content": "The Big Bang theory is the scientific explanation that the universe began as an extremely hot, dense point and has been expanding for about 13.8 billion years."}]}
{"messages": [{"role": "user", "content": "How do you check Python version?"}, {"role": "assistant", "content": "Run python --version in terminal or import sys; print(sys.version) in Python code."}]}
{"messages": [{"role": "user", "content": "What is evolution?"}, {"role": "assistant", "content": "Evolution is the process by which species change over time through natural selection, mutation, and genetic variation."}]}
{"messages": [{"role": "user", "content": "How do you copy a list in Python?"}, {"role": "assistant", "content": "Use new_list = old_list.copy() or new_list = old_list[:] for shallow copy, or import copy; new_list = copy.deepcopy(old_list) for deep copy."}]}
{"messages": [{"role": "user", "content": "What is gravity?"}, {"role": "assistant", "content": "Gravity is a fundamental force that attracts objects with mass toward each other, described by Einstein's general relativity."}]}
{"messages": [{"role": "user", "content": "How do you count occurrences of an element in a list?"}, {"role": "assistant", "content": "Use the count() method: occurrences = my_list.count(element)"}]}
{"messages": [{"role": "user", "content": "What is the difference between weather and climate?"}, {"role": "assistant", "content": "Weather is short-term atmospheric conditions, while climate is the long-term average of weather patterns in a region over many years."}]}
{"messages": [{"role": "user", "content": "How do you get user input in Python?"}, {"role": "assistant", "content": "Use the input() function: user_input = input('Enter something: ')"}]}
{"messages": [{"role": "user", "content": "What is ATP?"}, {"role": "assistant", "content": "ATP (Adenosine Triphosphate) is the primary energy currency of cells, storing and transferring energy for cellular processes."}]}
{"messages": [{"role": "user", "content": "How do you convert string to lowercase in Python?"}, {"role": "assistant", "content": "Use the lower() method: lowercase_string = my_string.lower()"}]}
{"messages": [{"role": "user", "content": "What is plate tectonics?"}, {"role": "assistant", "content": "Plate tectonics is the theory that Earth's outer shell is divided into plates that move and interact, causing earthquakes, volcanoes, and mountain formation."}]}
{"messages": [{"role": "user", "content": "How do you check if a string contains a substring?"}, {"role": "assistant", "content": "Use the 'in' operator: if 'substring' in my_string: or use the find() method: index = my_string.find('substring')"}]}
{"messages": [{"role": "user", "content": "What is an atom?"}, {"role": "assistant", "content": "An atom is the smallest unit of matter that retains the properties of an element, consisting of protons, neutrons, and electrons."}]}
{"messages": [{"role": "user", "content": "How do you generate random numbers in Python?"}, {"role": "assistant", "content": "Use the random module: import random; num = random.randint(1, 10) for integers or random.random() for floats between 0 and 1."}]}
{"messages": [{"role": "user", "content": "What is osmosis?"}, {"role": "assistant", "content": "Osmosis is the movement of water molecules across a semi-permeable membrane from an area of lower solute concentration to higher concentration."}]}
{"messages": [{"role": "user", "content": "How do you concatenate lists in Python?"}, {"role": "assistant", "content": "Use the + operator: combined = list1 + list2 or extend(): list1.extend(list2)"}]}
{"messages": [{"role": "user", "content": "What is the electromagnetic spectrum?"}, {"role": "assistant", "content": "The electromagnetic spectrum is the range of all electromagnetic radiation, from radio waves to gamma rays, including visible light."}]}
{"messages": [{"role": "user", "content": "How do you compare strings in Python?"}, {"role": "assistant", "content": "Use == for equality: if string1 == string2: or comparison operators like <, >, which compare lexicographically."}]}
{"messages": [{"role": "user", "content": "What is mitosis?"}, {"role": "assistant", "content": "Mitosis is cell division that produces two identical daughter cells with the same number of chromosomes as the parent cell."}]}
{"messages": [{"role": "user", "content": "How do you create a virtual environment in Python?"}, {"role": "assistant", "content": "Run: python -m venv myenv to create and source myenv/bin/activate (Linux/Mac) or myenv\\Scripts\\activate (Windows) to activate."}]}
{"messages": [{"role": "user", "content": "What is a chemical bond?"}, {"role": "assistant", "content": "A chemical bond is an attraction between atoms that allows the formation of molecules, including ionic, covalent, and metallic bonds."}]}
{"messages": [{"role": "user", "content": "How do you handle JSON in Python?"}, {"role": "assistant", "content": "Use the json module: import json; data = json.loads(json_string) to parse, json.dumps(data) to serialize."}]}
{"messages": [{"role": "user", "content": "What is the circulatory system?"}, {"role": "assistant", "content": "The circulatory system is the network of heart, blood vessels, and blood that delivers oxygen and nutrients throughout the body."}]}
{"messages": [{"role": "user", "content": "How do you use list slicing in Python?"}, {"role": "assistant", "content": "Use bracket notation: my_list[start:end:step]. Example: my_list[1:5] gets elements from index 1 to 4."}]}
{"messages": [{"role": "user", "content": "What is Newton's second law?"}, {"role": "assistant", "content": "Newton's second law states that Force equals mass times acceleration: F = ma"}]}
{"messages": [{"role": "user", "content": "How do you use try-except-finally in Python?"}, {"role": "assistant", "content": "Structure: try: risky_code() except Exception as e: handle_error(e) finally: cleanup() - finally always executes."}]}
{"messages": [{"role": "user", "content": "What is an enzyme?"}, {"role": "assistant", "content": "An enzyme is a biological catalyst that speeds up chemical reactions in living organisms without being consumed in the process."}]}
{"messages": [{"role": "user", "content": "How do you use the range function in Python?"}, {"role": "assistant", "content": "range(stop) generates 0 to stop-1, range(start, stop) generates start to stop-1, range(start, stop, step) uses custom increment."}]}
{"messages": [{"role": "user", "content": "What is the nervous system?"}, {"role": "assistant", "content": "The nervous system is the network of neurons and nerves that transmits signals between the brain, spinal cord, and body for coordination and control."}]}
{"messages": [{"role": "user", "content": "How do you use map function in Python?"}, {"role": "assistant", "content": "map() applies a function to all items: result = list(map(function, iterable))"}]}
{"messages": [{"role": "user", "content": "What is kinetic energy?"}, {"role": "assistant", "content": "Kinetic energy is the energy of motion, calculated as KE = ½mv² where m is mass and v is velocity."}]}
{"messages": [{"role": "user", "content": "How do you use filter function in Python?"}, {"role": "assistant", "content": "filter() filters items: result = list(filter(predicate_function, iterable))"}]}
{"messages": [{"role": "user", "content": "What is potential energy?"}, {"role": "assistant", "content": "Potential energy is stored energy due to position or configuration, such as gravitational PE = mgh where m is mass, g is gravity, h is height."}]}
{"messages": [{"role": "user", "content": "How do you use reduce function in Python?"}, {"role": "assistant", "content": "Import from functools: from functools import reduce; result = reduce(function, iterable, initial_value)"}]}
{"messages": [{"role": "user", "content": "What is conservation of energy?"}, {"role": "assistant", "content": "Conservation of energy states that energy cannot be created or destroyed, only transformed from one form to another."}]}
{"messages": [{"role": "user", "content": "How do you zip two lists in Python?"}, {"role": "assistant", "content": "Use zip(): paired = list(zip(list1, list2)) creates tuples of corresponding elements."}]}
{"messages": [{"role": "user", "content": "What is the difference between mass and weight?"}, {"role": "assistant", "content": "Mass is the amount of matter in an object (kg), while weight is the force of gravity on that mass (Newtons), calculated as W = mg."}]}
{"messages": [{"role": "user", "content": "How do you use enumerate in Python?"}, {"role": "assistant", "content": "enumerate() adds a counter: for index, value in enumerate(my_list):"}]}
{"messages": [{"role": "user", "content": "What is momentum?"}, {"role": "assistant", "content": "Momentum is mass times velocity (p = mv), representing an object's quantity of motion."}]}
{"messages": [{"role": "user", "content": "How do you sort a dictionary by value in Python?"}, {"role": "assistant", "content": "Use sorted(): sorted_dict = dict(sorted(my_dict.items(), key=lambda x: x[1]))"}]}
{"messages": [{"role": "user", "content": "What is friction?"}, {"role": "assistant", "content": "Friction is a force that opposes motion between surfaces in contact, converting kinetic energy to heat."}]}
{"messages": [{"role": "user", "content": "How do you use any() and all() in Python?"}, {"role": "assistant", "content": "any() returns True if any element is True, all() returns True if all elements are True."}]}
{"messages": [{"role": "user", "content": "What is Pascal's principle?"}, {"role": "assistant", "content": "Pascal's principle states that pressure applied to a confined fluid is transmitted equally throughout the fluid in all directions."}]}
{"messages": [{"role": "user", "content": "How do you use defaultdict in Python?"}, {"role": "assistant", "content": "from collections import defaultdict; d = defaultdict(list) provides a default value for missing keys."}]}
{"messages": [{"role": "user", "content": "What is Archimedes' principle?"}, {"role": "assistant", "content": "Archimedes' principle states that an object submerged in fluid experiences an upward buoyant force equal to the weight of displaced fluid."}]}
{"messages": [{"role": "user", "content": "How do you use Counter in Python?"}, {"role": "assistant", "content": "from collections import Counter; counts = Counter(my_list) creates a dict-like object counting occurrences."}]}
{"messages": [{"role": "user", "content": "What is Ohm's law?"}, {"role": "assistant", "content": "Ohm's law states that voltage equals current times resistance: V = IR"}]}
{"messages": [{"role": "user", "content": "How do you use namedtuple in Python?"}, {"role": "assistant", "content": "from collections import namedtuple; Point = namedtuple('Point', ['x', 'y']); p = Point(1, 2)"}]}
{"messages": [{"role": "user", "content": "What is the ideal gas law?"}, {"role": "assistant", "content": "The ideal gas law is PV = nRT where P is pressure, V is volume, n is moles, R is gas constant, and T is temperature."}]}
{"messages": [{"role": "user", "content": "How do you use list comprehension with conditions?"}, {"role": "assistant", "content": "Add if clause: result = [x for x in list if condition] or if-else: [x if condition else y for x in list]"}]}
{"messages": [{"role": "user", "content": "What is the Doppler effect?"}, {"role": "assistant", "content": "The Doppler effect is the change in frequency of a wave relative to an observer moving relative to the wave source."}]}
{"messages": [{"role": "user", "content": "How do you use dictionary comprehension in Python?"}, {"role": "assistant", "content": "Use curly braces: new_dict = {key: value for key, value in iterable}"}]}
{"messages": [{"role": "user", "content": "What is specific heat capacity?"}, {"role": "assistant", "content": "Specific heat capacity is the energy needed to raise 1 kg of a substance by 1°C, used in Q = mcΔT calculations."}]}
{"messages": [{"role": "user", "content": "How do you use set comprehension in Python?"}, {"role": "assistant", "content": "Use curly braces: new_set = {expression for item in iterable}"}]}
{"messages": [{"role": "user", "content": "What is Bernoulli's principle?"}, {"role": "assistant", "content": "Bernoulli's principle states that an increase in fluid velocity occurs simultaneously with a decrease in pressure."}]}
{"messages": [{"role": "user", "content": "How do you use the with statement in Python?"}, {"role": "assistant", "content": "with manages resources: with open('file.txt') as f: data = f.read() - automatically closes file."}]}
{"messages": [{"role": "user", "content": "What is half-life?"}, {"role": "assistant", "content": "Half-life is the time required for half of a radioactive substance to decay."}]}
{"messages": [{"role": "user", "content": "How do you use assert in Python?"}, {"role": "assistant", "content": "assert checks conditions: assert condition, 'Error message' - raises AssertionError if condition is False."}]}
{"messages": [{"role": "user", "content": "What is the doppler shift equation?"}, {"role": "assistant", "content": "Doppler shift: f' = f(v + v₀)/(v - vₛ) where f' is observed frequency, f is source frequency, v is wave speed, v₀ is observer velocity, vₛ is source velocity."}]}
{"messages": [{"role": "user", "content": "How do you use the ternary operator in Python?"}, {"role": "assistant", "content": "Syntax: value_if_true if condition else value_if_false"}]}
{"messages": [{"role": "user", "content": "What is the difference between series and parallel circuits?"}, {"role": "assistant", "content": "In series circuits, current is constant and voltage divides; in parallel circuits, voltage is constant and current divides."}]}
{"messages": [{"role": "user", "content": "How do you unpack tuples in Python?"}, {"role": "assistant", "content": "Use multiple assignment: x, y, z = my_tuple or *rest for remaining items: x, *rest, z = my_tuple"}]}
{"messages": [{"role": "user", "content": "What is capacitance?"}, {"role": "assistant", "content": "Capacitance is the ability to store electric charge, measured in Farads: C = Q/V where Q is charge and V is voltage."}]}
{"messages": [{"role": "user", "content": "How do you use *args and **kwargs in Python?"}, {"role": "assistant", "content": "*args accepts variable positional arguments as tuple, **kwargs accepts variable keyword arguments as dict."}]}
{"messages": [{"role": "user", "content": "What is inductance?"}, {"role": "assistant", "content": "Inductance is the property of a conductor to oppose changes in current, measured in Henries, related to induced EMF."}]}
{"messages": [{"role": "user", "content": "How do you create a shallow copy vs deep copy?"}, {"role": "assistant", "content": "Shallow copy: new = old.copy() copies references. Deep copy: import copy; new = copy.deepcopy(old) copies all nested objects."}]}
{"messages": [{"role": "user", "content": "What is electric field?"}, {"role": "assistant", "content": "Electric field is the force per unit charge at a point: E = F/q, measured in N/C or V/m."}]}
{"messages": [{"role": "user", "content": "How do you use the walrus operator in Python?"}, {"role": "assistant", "content": "The := operator assigns and returns: if (n := len(data)) > 10: print(n)"}]}
{"messages": [{"role": "user", "content": "What is magnetic flux?"}, {"role": "assistant", "content": "Magnetic flux is the measure of magnetic field passing through a surface: Φ = B·A·cos(θ), measured in Webers."}]}
{"messages": [{"role": "user", "content": "How do you use pathlib in Python?"}, {"role": "assistant", "content": "from pathlib import Path; path = Path('file.txt'); exists = path.exists(); text = path.read_text()"}]}
{"messages": [{"role": "user", "content": "What is Faraday's law?"}, {"role": "assistant", "content": "Faraday's law states that induced EMF equals the negative rate of change of magnetic flux: ε = -dΦ/dt"}]}
{"messages": [{"role": "user", "content": "How do you use dataclasses in Python?"}, {"role": "assistant", "content": "from dataclasses import dataclass; @dataclass class Point: x: int; y: int - auto-generates __init__, __repr__, etc."}]}
{"messages": [{"role": "user", "content": "What is Lenz's law?"}, {"role": "assistant", "content": "Lenz's law states that induced current flows in a direction to oppose the change in magnetic flux that produced it."}]}
{"messages": [{"role": "user", "content": "How do you use type hints in Python?"}, {"role": "assistant", "content": "Add type annotations: def greet(name: str) -> str: return f'Hello {name}'"}]}
{"messages": [{"role": "user", "content": "What is AC vs DC current?"}, {"role": "assistant", "content": "AC (Alternating Current) periodically reverses direction, while DC (Direct Current) flows in one direction."}]}
{"messages": [{"role": "user", "content": "How do you use generators in Python?"}, {"role": "assistant", "content": "Use yield: def my_gen(): yield 1; yield 2 - creates an iterator that generates values lazily."}]}
{"messages": [{"role": "user", "content": "What is RMS voltage?"}, {"role": "assistant", "content": "RMS (Root Mean Square) voltage is the effective DC equivalent of AC voltage: Vᵣₘₛ = Vₚₑₐₖ/√2"}]}
{"messages": [{"role": "user", "content": "How do you use context managers in Python?"}, {"role": "assistant", "content": "Create with __enter__ and __exit__ methods, or use @contextmanager decorator with try-finally."}]}
{"messages": [{"role": "user", "content": "What is the work-energy theorem?"}, {"role": "assistant", "content": "The work-energy theorem states that work done on an object equals its change in kinetic energy: W = ΔKE"}]}
{"messages": [{"role": "user", "content": "How do you use metaclasses in Python?"}, {"role": "assistant", "content": "Define class Meta(type): and use metaclass=Meta in class definition to control class creation."}]}
{"messages": [{"role": "user", "content": "What is torque?"}, {"role": "assistant", "content": "Torque is rotational force: τ = r × F = rF·sin(θ), measured in Newton-meters."}]}
{"messages": [{"role": "user", "content": "How do you use functools.lru_cache in Python?"}, {"role": "assistant", "content": "@functools.lru_cache(maxsize=128) decorator caches function results for faster repeated calls with same arguments."}]}
{"messages": [{"role": "user", "content": "What is angular momentum?"}, {"role": "assistant", "content": "Angular momentum is rotational momentum: L = I·ω where I is moment of inertia and ω is angular velocity."}]}
{"messages": [{"role": "user", "content": "How do you use property decorators in Python?"}, {"role": "assistant", "content": "@property decorator creates getter, @name.setter creates setter: @property def name(self): return self._name"}]}
{"messages": [{"role": "user", "content": "What is centripetal acceleration?"}, {"role": "assistant", "content": "Centripetal acceleration is acceleration toward the center of circular motion: aᶜ = v²/r = ω²r"}]}
{"messages": [{"role": "user", "content": "How do you use staticmethod and classmethod in Python?"}, {"role": "assistant", "content": "@staticmethod doesn't receive self/cls, @classmethod receives cls as first parameter for class-level operations."}]}
{"messages": [{"role": "user", "content": "What is simple harmonic motion?"}, {"role": "assistant", "content": "Simple harmonic motion is periodic oscillation where restoring force is proportional to displacement: F = -kx"}]}
{"messages": [{"role": "user", "content": "How do you use the logging module in Python?"}, {"role": "assistant", "content": "import logging; logging.basicConfig(level=logging.INFO); logging.info('message')"}]}
{"messages": [{"role": "user", "content": "What is wave interference?"}, {"role": "assistant", "content": "Wave interference occurs when waves superpose: constructive interference increases amplitude, destructive interference decreases it."}]}
{"messages": [{"role": "user", "content": "How do you use regular expressions in Python?"}, {"role": "assistant", "content": "import re; match = re.search(pattern, string); groups = re.findall(pattern, string)"}]}
{"messages": [{"role": "user", "content": "What is diffraction?"}, {"role": "assistant", "content": "Diffraction is the bending of waves around obstacles or through openings, most noticeable when wavelength is comparable to obstacle size."}]}
{"messages": [{"role": "user", "content": "How do you use async/await in Python?"}, {"role": "assistant", "content": "async def my_func(): result = await async_operation() - enables asynchronous programming with asyncio."}]}
{"messages": [{"role": "user", "content": "What is refraction?"}, {"role": "assistant", "content": "Refraction is the bending of waves when passing between media with different densities, described by Snell's law: n₁sin(θ₁) = n₂sin(θ₂)"}]}
{"messages": [{"role": "user", "content": "How do you use collections.deque in Python?"}, {"role": "assistant", "content": "from collections import deque; d = deque([1, 2, 3]); d.appendleft(0); d.pop() - efficient for queue operations."}]}
{"messages": [{"role": "user", "content": "What is the photoelectric effect?"}, {"role": "assistant", "content": "The photoelectric effect is the emission of electrons when light hits a material, demonstrating light's particle nature."}]}
{"messages": [{"role": "user", "content": "How do you use threading in Python?"}, {"role": "assistant", "content": "import threading; t = threading.Thread(target=function, args=()); t.start(); t.join()"}]}
{"messages": [{"role": "user", "content": "What is Compton scattering?"}, {"role": "assistant", "content": "Compton scattering is the decrease in photon energy (increase in wavelength) when it scatters off an electron."}]}
{"messages": [{"role": "user", "content": "How do you use multiprocessing in Python?"}, {"role": "assistant", "content": "from multiprocessing import Process; p = Process(target=func); p.start(); p.join()"}]}
{"messages": [{"role": "user", "content": "What is pair production?"}, {"role": "assistant", "content": "Pair production is the creation of a particle-antiparticle pair from a photon with energy ≥ 2mₑc² near a nucleus."}]}
{"messages": [{"role": "user", "content": "How do you use pickle in Python?"}, {"role": "assistant", "content": "import pickle; pickle.dump(obj, file) to serialize, obj = pickle.load(file) to deserialize."}]}
{"messages": [{"role": "user", "content": "What is wave-particle duality?"}, {"role": "assistant", "content": "Wave-particle duality is the concept that all matter exhibits both wave and particle properties, with de Broglie wavelength λ = h/p"}]}
{"messages": [{"role": "user", "content": "How do you use csv module in Python?"}, {"role": "assistant", "content": "import csv; with open('file.csv') as f: reader = csv.reader(f); for row in reader: process(row)"}]}
{"messages": [{"role": "user", "content": "What is the Heisenberg uncertainty principle?"}, {"role": "assistant", "content": "The Heisenberg uncertainty principle states that Δx·Δp ≥ ℏ/2, meaning position and momentum cannot be simultaneously known with arbitrary precision."}]}
{"messages": [{"role": "user", "content": "How do you use datetime in Python?"}, {"role": "assistant", "content": "from datetime import datetime; now = datetime.now(); formatted = now.strftime('%Y-%m-%d %H:%M:%S')"}]}
{"messages": [{"role": "user", "content": "What is quantum tunneling?"}, {"role": "assistant", "content": "Quantum tunneling is the quantum mechanical phenomenon where particles pass through energy barriers they classically shouldn't be able to cross."}]}
{"messages": [{"role": "user", "content": "How do you use requests library in Python?"}, {"role": "assistant", "content": "import requests; response = requests.get(url); data = response.json()"}]}
{"messages": [{"role": "user", "content": "What is the Pauli exclusion principle?"}, {"role": "assistant", "content": "The Pauli exclusion principle states that no two fermions can occupy the same quantum state simultaneously."}]}
{"messages": [{"role": "user", "content": "How do you use numpy arrays?"}, {"role": "assistant", "content": "import numpy as np; arr = np.array([1, 2, 3]); result = arr * 2"}]}
{"messages": [{"role": "user", "content": "What is the Schrödinger equation?"}, {"role": "assistant", "content": "The Schrödinger equation describes how quantum states evolve: iℏ∂ψ/∂t = Ĥψ where ψ is the wave function and Ĥ is the Hamiltonian operator."}]}
{"messages": [{"role": "user", "content": "How do you use pandas DataFrame?"}, {"role": "assistant", "content": "import pandas as pd; df = pd.DataFrame(data); filtered = df[df['column'] > 5]"}]}
{"messages": [{"role": "user", "content": "What is quantum entanglement?"}, {"role": "assistant", "content": "Quantum entanglement is a phenomenon where quantum states of particles become correlated such that measuring one instantly affects the other, regardless of distance."}]}
{"messages": [{"role": "user", "content": "How do you use matplotlib for plotting?"}, {"role": "assistant", "content": "import matplotlib.pyplot as plt; plt.plot(x, y); plt.xlabel('X'); plt.ylabel('Y'); plt.show()"}]}
{"messages": [{"role": "user", "content": "What is nuclear fission?"}, {"role": "assistant", "content": "Nuclear fission is the splitting of heavy atomic nuclei into lighter nuclei, releasing energy according to E=mc²."}]}
{"messages": [{"role": "user", "content": "How do you use SQLAlchemy in Python?"}, {"role": "assistant", "content": "from sqlalchemy import create_engine; engine = create_engine('sqlite:///db.sqlite'); connection = engine.connect()"}]}
{"messages": [{"role": "user", "content": "What is nuclear fusion?"}, {"role": "assistant", "content": "Nuclear fusion is the combining of light atomic nuclei to form heavier nuclei, releasing tremendous energy - powers the sun."}]}
{"messages": [{"role": "user", "content": "How do you use Flask for web development?"}, {"role": "assistant", "content": "from flask import Flask; app = Flask(__name__); @app.route('/') def home(): return 'Hello'; app.run()"}]}
{"messages": [{"role": "user", "content": "What is radioactive decay?"}, {"role": "assistant", "content": "Radioactive decay is the spontaneous transformation of unstable nuclei, following N(t) = N₀e^(-λt) where λ is the decay constant."}]}
{"messages": [{"role": "user", "content": "How do you use Django models?"}, {"role": "assistant", "content": "from django.db import models; class MyModel(models.Model): name = models.CharField(max_length=100)"}]}
{"messages": [{"role": "user", "content": "What is beta decay?"}, {"role": "assistant", "content": "Beta decay is radioactive decay where a nucleus emits a beta particle (electron or positron) and neutrino, changing a neutron to proton or vice versa."}]}
{"messages": [{"role": "user", "content": "How do you handle environment variables in Python?"}, {"role": "assistant", "content": "import os; value = os.environ.get('VAR_NAME', 'default_value') or use python-dotenv for .env files."}]}
{"messages": [{"role": "user", "content": "What is alpha decay?"}, {"role": "assistant", "content": "Alpha decay is radioactive decay where a nucleus emits an alpha particle (helium nucleus: 2 protons, 2 neutrons)."}]}
{"messages": [{"role": "user", "content": "How do you create REST APIs with FastAPI?"}, {"role": "assistant", "content": "from fastapi import FastAPI; app = FastAPI(); @app.get('/') async def root(): return {'message': 'Hello'}"}]}
{"messages": [{"role": "user", "content": "What is gamma decay?"}, {"role": "assistant", "content": "Gamma decay is radioactive decay where an excited nucleus releases energy as high-energy photons (gamma rays) without changing composition."}]}
{"messages": [{"role": "user", "content": "How do you use pytest for testing?"}, {"role": "assistant", "content": "def test_function(): assert result == expected - run with pytest command. Use fixtures for setup: @pytest.fixture"}]}
{"messages": [{"role": "user", "content": "What is binding energy?"}, {"role": "assistant", "content": "Binding energy is the energy required to disassemble a nucleus into separate protons and neutrons, related to mass defect by E=Δmc²."}]}
{"messages": [{"role": "user", "content": "How do you use unittest in Python?"}, {"role": "assistant", "content": "import unittest; class TestCase(unittest.TestCase): def test_something(self): self.assertEqual(a, b)"}]}
{"messages": [{"role": "user", "content": "What is the strong nuclear force?"}, {"role": "assistant", "content": "The strong nuclear force is the fundamental force binding quarks into protons/neutrons and binding nucleons together in nuclei."}]}
{"messages": [{"role": "user", "content": "How do you use mock objects in Python testing?"}, {"role": "assistant", "content": "from unittest.mock import Mock, patch; mock = Mock(); mock.method.return_value = 'value'; with patch('module.func'):"}]}
{"messages": [{"role": "user", "content": "What is the weak nuclear force?"}, {"role": "assistant", "content": "The weak nuclear force mediates radioactive decay (especially beta decay) and neutrino interactions."}]}
{"messages": [{"role": "user", "content": "How do you use decorators with arguments?"}, {"role": "assistant", "content": "def decorator(arg): def wrapper(func): def inner(*args): return func(*args); return inner; return wrapper"}]}
{"messages": [{"role": "user", "content": "What is antimatter?"}, {"role": "assistant", "content": "Antimatter consists of antiparticles with opposite charge to normal matter; matter-antimatter annihilation produces energy according to E=mc²."}]}
{"messages": [{"role": "user", "content": "How do you implement the singleton pattern in Python?"}, {"role": "assistant", "content": "class Singleton: _instance = None; def __new__(cls): if not cls._instance: cls._instance = super().__new__(cls); return cls._instance"}]}
{"messages": [{"role": "user", "content": "What is special relativity?"}, {"role": "assistant", "content": "Special relativity describes physics at high speeds: time dilation, length contraction, mass-energy equivalence (E=mc²), with speed of light constant."}]}
{"messages": [{"role": "user", "content": "How do you use Abstract Base Classes in Python?"}, {"role": "assistant", "content": "from abc import ABC, abstractmethod; class Base(ABC): @abstractmethod def method(self): pass"}]}
{"messages": [{"role": "user", "content": "What is general relativity?"}, {"role": "assistant", "content": "General relativity describes gravity as curvature of spacetime caused by mass-energy, explaining phenomena like gravitational time dilation and black holes."}]}
{"messages": [{"role": "user", "content": "How do you use itertools in Python?"}, {"role": "assistant", "content": "import itertools; combinations = itertools.combinations([1,2,3], 2); chain = itertools.chain(list1, list2)"}]}
{"messages": [{"role": "user", "content": "What is time dilation?"}, {"role": "assistant", "content": "Time dilation is the slowing of time for moving observers or in gravitational fields: Δt' = Δt/√(1-v²/c²) for special relativity."}]}
{"messages": [{"role": "user", "content": "How do you use collections.ChainMap?"}, {"role": "assistant", "content": "from collections import ChainMap; combined = ChainMap(dict1, dict2) - searches multiple dicts as single mapping."}]}
{"messages": [{"role": "user", "content": "What is length contraction?"}, {"role": "assistant", "content": "Length contraction is the shortening of objects in the direction of motion: L = L₀√(1-v²/c²)"}]}
{"messages": [{"role": "user", "content": "How do you create custom exceptions in Python?"}, {"role": "assistant", "content": "class CustomError(Exception): def __init__(self, message): self.message = message; super().__init__(self.message)"}]}
{"messages": [{"role": "user", "content": "What is a black hole?"}, {"role": "assistant", "content": "A black hole is a region of spacetime where gravity is so strong that nothing, not even light, can escape from within the event horizon."}]}
{"messages": [{"role": "user", "content": "How do you use weakref in Python?"}, {"role": "assistant", "content": "import weakref; ref = weakref.ref(obj) creates weak reference that doesn't prevent garbage collection."}]}
{"messages": [{"role": "user", "content": "What is Hawking radiation?"}, {"role": "assistant", "content": "Hawking radiation is theoretical thermal radiation emitted by black holes due to quantum effects near the event horizon."}]}
{"messages": [{"role": "user", "content": "How do you implement memoization in Python?"}, {"role": "assistant", "content": "Use @functools.lru_cache decorator or manually: cache = {}; if arg in cache: return cache[arg]; cache[arg] = compute()"}]}
{"messages": [{"role": "user", "content": "What is dark matter?"}, {"role": "assistant", "content": "Dark matter is invisible matter detected only through gravitational effects, making up ~27% of universe's mass-energy."}]}
{"messages": [{"role": "user", "content": "How do you use slots in Python classes?"}, {"role": "assistant", "content": "class MyClass: __slots__ = ['x', 'y'] - restricts attributes and reduces memory usage."}]}
{"messages": [{"role": "user", "content": "What is dark energy?"}, {"role": "assistant", "content": "Dark energy is the mysterious energy causing the universe's accelerating expansion, comprising ~68% of universe's mass-energy."}]}
{"messages": [{"role": "user", "content": "How do you implement the observer pattern in Python?"}, {"role": "assistant", "content": "class Subject: observers = []; def notify(self): for obs in self.observers: obs.update(self)"}]}
{"messages": [{"role": "user", "content": "What is cosmic microwave background radiation?"}, {"role": "assistant", "content": "CMB is the remnant thermal radiation from the Big Bang, providing evidence for the universe's origin and early structure."}]}
{"messages": [{"role": "user", "content": "How do you use contextlib.suppress?"}, {"role": "assistant", "content": "from contextlib import suppress; with suppress(FileNotFoundError): os.remove('file.txt') - ignores specified exceptions."}]}
{"messages": [{"role": "user", "content": "What is redshift in astronomy?"}, {"role": "assistant", "content": "Redshift is the increase in wavelength of light from distant galaxies due to universe expansion, used to measure distance and velocity."}]}
{"messages": [{"role": "user", "content": "How do you use the bisect module in Python?"}, {"role": "assistant", "content": "import bisect; index = bisect.bisect_left(sorted_list, value) - finds insertion point to maintain sorted order."}]}
{"messages": [{"role": "user", "content": "What is the Hubble constant?"}, {"role": "assistant", "content": "The Hubble constant describes the universe's expansion rate: v = H₀×d, relating galaxy recession velocity to distance."}]}
